* Registers
The following registers are used by the VM. These cannot be modified with instructions at this time.

rp: return pointer. Address to return to when ret is called. Set when call is executed.
sp: stack pointer.
bp: base pointer.
ip: instruction pointer.
rr: remainder register. Remainder of a division.

br: bool register. compare/flag register to determine if jmp moves the ip.

The following are general purpose rgisters. These may be modified freely.
sr: signed, general purpose registers
ur: unsigned, general purpose registers
fr: floating point, general purpose registers

* Instructions
Instructions are equal length (64 bits) to reduce the number of additions and for easier alignment. 
6 bits are used for instruction opcodes.
5 bits are used for registers.
53 bits are used for addresses.

/A table of bits to opcodes can be found at the bottom of this section./

** Key
| $r    | register         |
| $addr | memory address   |
| $mem  | register/memory  |
| $lit  | literal          |
| $val  | literal/register |
** Memory
poke $r, $addr
peek $r, $addr
** Numerical Operations
add, sub, mul, div, and, or, and xor follow this format:
add $r, $val, $val : r = val + val
mov $r, val : r = val

** Control
call $mem
jmp $mem
ret
stop
** Library
[[https://linux.die.net/man/3/dlopen][load]] $r0, $r1, $r2 : where $r1 is the address of a string of the library to open, $r2 is the flags, and $r0 is where the handle is stored
[[https://linux.die.net/man/3/dlsym][sym]] $r0, $mem1 : where $r0 is the address of the handle, and $mem1 is the address of a string of the symbol to obtain.

ccall $r, $mem1, $mem2 : where r is the size to pass from the stack pointer, mem1 is a string of function name to call and mem2 is a pointer

c functions: must use the bivalance_func signature

bool func(void *arg)
** Bit table
In this table, *n* is up to the maximum number of general purpose registers. 
Depending on how the VM is compiled, this number may be between 4 and 32. Therefore, this requires 5 bits.
These bits are placed after the instruction and register type bits (considered to be the opcode). 

*addr* must be 53 bits (to fit 8 bytes), and *#n* is the size of *addr*.

The order of *n* and *addr* in the instruction is what follows the opcode respectively.

| Instruction                 | Opcode Bits |
|-----------------------------+-------------|
| UNINITIALIZED               |      000000 |
| poke  sr[n]   [addr]        |      000001 |
| poke  ur[n]   [addr]        |      000010 |
| poke  fr[n]   [addr]        |      000011 |
| peek  sr[n]   [addr]        |      000100 |
| peek  ur[n]   [addr]        |      000101 |
| peek  fr[n]   [addr]        |      000110 |
| add   sr[n]   sr[n]   sr[n] |      000111 |
| add   ur[n]   ur[n]   ur[n] |      001000 |
| add   fr[n]   fr[n]   fr[n] |      001001 |
| sub   sr[n]   sr[n]   sr[n] |      001010 |
| sub   ur[n]   ur[n]   ur[n] |      001011 |
| sub   fr[n]   fr[n]   fr[n] |      001100 |
| mul   sr[n]   sr[n]   sr[n] |      001101 |
| mul   ur[n]   ur[n]   ur[n] |      001110 |
| mul   fr[n]   fr[n]   fr[n] |      001111 |
| div   sr[n]   sr[n]   sr[n] |      010000 |
| div   ur[n]   ur[n]   ur[n] |      010001 |
| div   fr[n]   fr[n]   fr[n] |      010010 |
| and   sr[n]   sr[n]   sr[n] |      010011 |
| and   ur[n]   ur[n]   ur[n] |      010100 |
| or    sr[n]   sr[n]   sr[n] |      010101 |
| or    ur[n]   ur[n]   ur[n] |      010110 |
| xor   sr[n]   sr[n]   sr[n] |      010111 |
| xor   ur[n]   ur[n]   ur[n] |      011000 |
| mov   sr[n]   sr[n]         |      011001 |
| mov   sr[n]   ur[n]         |      011010 |
| mov   sr[n]   fr[n]         |      011011 |
| mov   ur[n]   sr[n]         |      011100 |
| mov   ur[n]   ur[n]         |      011100 |
| mov   ur[n]   fr[n]         |      011101 |
| mov   fr[n]   sr[n]         |      011110 |
| mov   fr[n]   ur[n]         |      011111 |
| mov   fr[n]   fr[n]         |      100000 |
| mov   sr[n]   #n            |      100001 |
| mov   ur[n]   #n            |      100010 |
| mov   fr[n]   #n            |      100011 |
| call  [addr]                |      100100 |
| call  ur[n]                 |      100101 |
| jmp   [addr]                |      100110 |
| jmp   ur[n]                 |      100111 |
| ret                         |      101000 |
| stop                        |      101001 |
| load  ur[n]  ur[n]    ur[n] |      101010 |
| sym   [ur]   [addr]         |      101011 |
| ccall [ur]   [ur]     [ur]  |      101100 |

* VM pipeline
** Startup
*** Setup Signals
The following signals are caught by the VM.

| SIGINT  | cleans up and exits              |
| SIGSEGV | opens reporter and terminates    |

*** Init Cores and Libs
Currently, the cores on the VM each contain an execution stack, a copy of a page. Each core has a stack pointer relative to the start of the stack. This method only keeps only in-use pages in memory. 
The VM shall eventually map pages for better performance, making these execution stacks simply pointers to a page, reducing potential redundancy.

The first page of the program is read into memory, and copied to the first core. If the entire program can fit into one page, then all of the cores will copy this page at runtime. When page mapping is implemented, this will become a less costly operation.

Standard libraries will also be loaded for IO and convience functions. 

*** Begin execution on first core
** Execution
Each core iterates over its execution stack. 
If it reaches an end of stack opcode then the next stack is obtained. 
Addresses of instructions are not relative to the stack, but to the overall program.
If an instruction is not within the page then the new page is loaded.
** Page replacement
Page replacement shall be done in a hybrid LRU+LFU fashion. As a base LFU is used, but of those least frequently used, the least recently used is replaced.
