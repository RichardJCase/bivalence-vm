* Registers
rp: return pointer. Address to return to when ret is called.
sp: stack pointer.
bp: base pointer.
ip: instruction pointer.
rr: remainder of a division.

sr: signed, general purpose registers
ur: unsigned, general purpose registers
fr: floating point, general purpose registers

cr: compare/flag register

* Instructions
$r = Registers
$addr = Memory Address
$mem = register/memory

memory:
poke $r, $addr
peek $r, $addr

operations:
add $r0, $r1, $r2 : r0 = r1 + r2
sub "
mul "
div "
bitwise ops "

control:
todo: consider adding a string register or some other means

call $addr
jmp $mem (true), $mem (false)
ret
stop

library:
load $mem, $r : where $mem is the address of a string to the library to open, and $r is the flags
todo: where to put lib handle

sym $mem  : $mem is address of a string of symbol name
todo: where to put symbol

* VM pipeline
** startup
*** setup signals
*** init cores and libs
*** begin execution on first core
** execution
