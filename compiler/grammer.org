* Keys
| a = b             | a is an alias of b                               |
| a -> b            | The definition (b) of rule a.                    |
| a -> b, c, ..., z | Or'd definitions. a -> b or a -> c or ... a -> z |
| e                 | Empty string.                                    |
| 'a'               | Explicit string.                                 |
| ID                | Identifier alpha [alphanumeric, underscore]      |

* Aliases
TYPE = ID

* Base
program -> expr_list

expr_list -> expr expr_list, e
expr -> lemma

param_list -> TYPE ID param_list, e
ID_list -> ID ID_list, e

* Lemma
lemma -> sig '->' prop_list defn
sig -> TYPE ID param_list
defn -> app, imp

app -> ID ID_list out_vars '.'
out_vars -> '>' ID_list

* Propositions
prop_list -> prop prop_list, e
prop -> ID ':' defn

* Implication
imp -> ID '->' ID_list imp_tail
imp_tail -> '->' ID_list imp_tail, '.'

* Semantics
** Modules
*** import
 import [filename: ID] [optional alias: ID]
*** namespacing
Function names are preceded by the file, e.g 
hello.bv:
saystuff ->
  puts "test"

main.bv:
import hello
main ->
  hello_saystuff
** Native
definition for an external c function to be loaded
@ [sig]

** Types definitions
**** Basic Types
typedef [type name: ID] [: [derived types: ID_list]]
const ID [value]

**** Groups
group [group name: ID] [functions: ID_list]

** Concurrency
csp model
! : output
? : input - returns false if everything falls asleep
?? : nonblocking input
maxThreads : constant # of cores

main ->
  a: ? scan
  b: ? send
  and a b

scan ->
  scanned: scanDB > changes
  sent: ! changes
  scanned -> sent -> scan
  
send ->
  get: ? changes
  sent: sendChanges changes
  get -> sent -> send

* Additional checks
** Suger
_ = ID that is mutable that goes to nothing
** Always false functions
Functions that will always be false cause a compilation error, 
but a flag can turn off this error (for testing).
** Deadlock
Some deadlock can be prevented by the CSP style checks. 
If a function tries to recieve more than it can obtain, then it fails
* Examples
** Proposition
   myProp: add 1 1 > result
** Lemma
   myLemma ->
      a: connect "google.com"
      b: sendMessage "GET /"
      c: getResponse
      d: and a b
      and c d
** Implication
   uploadFun ->
      a: connectToDB
      b: addCatPhotos
      c: closeDB
      d: a -> b, c
      and a d
* Extra rules
** Comments
Comments are banned. Comments lie, code does not. Classic real world example:
#+BEGIN_SRC c
//enable scanning
scanning = false;
#+END_SRC
** IDs
IDs must be camelCase or a lone underscore
** Types
Types must be PascalCase
